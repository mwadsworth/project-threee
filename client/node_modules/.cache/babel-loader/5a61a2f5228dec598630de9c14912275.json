{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.sAlertStore = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  } // custom simple store based on a awesome Redux library https://github.com/rackt/redux\n\n\n  var createSAlertStore = function createSAlertStore(reducer) {\n    var state = void 0;\n    var listeners = [];\n\n    var getState = function getState() {\n      return state;\n    };\n\n    var dispatch = function dispatch(action) {\n      state = reducer(state, action);\n      listeners.forEach(function (listener) {\n        return listener();\n      });\n    };\n\n    var subscribe = function subscribe(listener) {\n      listeners.push(listener);\n      return function () {\n        listeners = listeners.filter(function (l) {\n          return l !== listener;\n        });\n      };\n    };\n\n    dispatch({});\n    return {\n      getState: getState,\n      dispatch: dispatch,\n      subscribe: subscribe\n    };\n  };\n\n  var insert = function insert(state, action) {\n    return [].concat(_toConsumableArray(state), [action.data]);\n  };\n\n  var remove = function remove(state, action) {\n    var elemToRemoveArray = state.slice().filter(function (item) {\n      return item.id === action.data.id;\n    });\n\n    if (Array.isArray(elemToRemoveArray)) {\n      var elemToRemoveIndex = state.indexOf(elemToRemoveArray[0]);\n      return [].concat(_toConsumableArray(state.slice(0, elemToRemoveIndex)), _toConsumableArray(state.slice(elemToRemoveIndex + 1)));\n    }\n\n    return state;\n  };\n\n  var alertsReducer = function alertsReducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var action = arguments[1];\n\n    switch (action.type) {\n      case 'INSERT':\n        return insert(state, action);\n\n      case 'REMOVE':\n        return remove(state, action);\n\n      case 'REMOVEALL':\n        return [];\n\n      default:\n        return state;\n    }\n  };\n\n  var sAlertStore = createSAlertStore(alertsReducer);\n  exports.default = sAlertStore;\n});","map":null,"metadata":{},"sourceType":"script"}