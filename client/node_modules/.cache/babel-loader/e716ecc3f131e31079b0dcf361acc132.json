{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dumpClassLists = dumpClassLists;\nvar htmlClassList = {};\nvar docBodyClassList = {};\n\nfunction dumpClassLists() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var classes = document.getElementsByTagName(\"html\")[0].className;\n    var buffer = \"Show tracked classes:\\n\\n\";\n    buffer += \"<html /> (\" + classes + \"):\\n\";\n\n    for (var x in htmlClassList) {\n      buffer += \"  \" + x + \" \" + htmlClassList[x] + \"\\n\";\n    }\n\n    classes = document.body.className; // eslint-disable-next-line max-len\n\n    buffer += \"\\n\\ndoc.body (\" + classes + \"):\\n\";\n\n    for (var _x in docBodyClassList) {\n      buffer += \"  \" + _x + \" \" + docBodyClassList[_x] + \"\\n\";\n    }\n\n    buffer += \"\\n\"; // eslint-disable-next-line no-console\n\n    console.log(buffer);\n  }\n}\n/**\r\n * Track the number of reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\n\n\nvar incrementReference = function incrementReference(poll, className) {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n\n  poll[className] += 1;\n  return className;\n};\n/**\r\n * Drop the reference of a class.\r\n * @param {object} poll The poll to receive the reference.\r\n * @param {string} className The class name.\r\n * @return {string}\r\n */\n\n\nvar decrementReference = function decrementReference(poll, className) {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n\n  return className;\n};\n/**\r\n * Track a class and add to the given class list.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be tracked.\r\n */\n\n\nvar trackClass = function trackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n/**\r\n * Untrack a class and remove from the given class list if the reference\r\n * reaches 0.\r\n * @param {Object} classListRef A class list of an element.\r\n * @param {Object} poll         The poll to be used.\r\n * @param {Array}  classes      The list of classes to be untracked.\r\n */\n\n\nvar untrackClass = function untrackClass(classListRef, poll, classes) {\n  classes.forEach(function (className) {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n/**\r\n * Public inferface to add classes to the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\n\n\nvar add = exports.add = function add(element, classString) {\n  return trackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};\n/**\r\n * Public inferface to remove classes from the document.body.\r\n * @param {string} bodyClass The class string to be added.\r\n *                           It may contain more then one class\r\n *                           with ' ' as separator.\r\n */\n\n\nvar remove = exports.remove = function remove(element, classString) {\n  return untrackClass(element.classList, element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList, classString.split(\" \"));\n};","map":null,"metadata":{},"sourceType":"script"}