{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _Const = require('./Const');\n\nvar _Const2 = _interopRequireDefault(_Const);\n\nvar _TableRow = require('./TableRow');\n\nvar _TableRow2 = _interopRequireDefault(_TableRow);\n\nvar _TableColumn = require('./TableColumn');\n\nvar _TableColumn2 = _interopRequireDefault(_TableColumn);\n\nvar _TableEditColumn = require('./TableEditColumn');\n\nvar _TableEditColumn2 = _interopRequireDefault(_TableEditColumn);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ExpandComponent = require('./ExpandComponent');\n\nvar _ExpandComponent2 = _interopRequireDefault(_ExpandComponent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TableBody = function (_Component) {\n  _inherits(TableBody, _Component);\n\n  function TableBody(props) {\n    _classCallCheck(this, TableBody);\n\n    var _this = _possibleConstructorReturn(this, (TableBody.__proto__ || Object.getPrototypeOf(TableBody)).call(this, props));\n\n    _this.handleCellKeyDown = function () {\n      return _this.__handleCellKeyDown__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleRowMouseOut = function () {\n      return _this.__handleRowMouseOut__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleRowMouseOver = function () {\n      return _this.__handleRowMouseOver__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleRowClick = function () {\n      return _this.__handleRowClick__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleRowDoubleClick = function () {\n      return _this.__handleRowDoubleClick__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleSelectRow = function () {\n      return _this.__handleSelectRow__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleSelectRowColumChange = function () {\n      return _this.__handleSelectRowColumChange__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleClickCell = function () {\n      return _this.__handleClickCell__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleEditCell = function () {\n      return _this.__handleEditCell__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.nextEditableCell = function () {\n      return _this.__nextEditableCell__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleCompleteEditCell = function () {\n      return _this.__handleCompleteEditCell__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.cancelEditCell = function () {\n      return _this.__cancelEditCell__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleClickonSelectColumn = function () {\n      return _this.__handleClickonSelectColumn__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.getHeaderColGrouop = function () {\n      return _this.__getHeaderColGrouop__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.state = {\n      currEditCell: null\n    };\n    return _this;\n  }\n\n  _createClass(TableBody, [{\n    key: '__getHeaderColGrouop__REACT_HOT_LOADER__',\n    value: function __getHeaderColGrouop__REACT_HOT_LOADER__() {\n      return this.__getHeaderColGrouop__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleClickonSelectColumn__REACT_HOT_LOADER__',\n    value: function __handleClickonSelectColumn__REACT_HOT_LOADER__() {\n      return this.__handleClickonSelectColumn__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__cancelEditCell__REACT_HOT_LOADER__',\n    value: function __cancelEditCell__REACT_HOT_LOADER__() {\n      return this.__cancelEditCell__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleCompleteEditCell__REACT_HOT_LOADER__',\n    value: function __handleCompleteEditCell__REACT_HOT_LOADER__() {\n      return this.__handleCompleteEditCell__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__nextEditableCell__REACT_HOT_LOADER__',\n    value: function __nextEditableCell__REACT_HOT_LOADER__() {\n      return this.__nextEditableCell__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleEditCell__REACT_HOT_LOADER__',\n    value: function __handleEditCell__REACT_HOT_LOADER__() {\n      return this.__handleEditCell__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleClickCell__REACT_HOT_LOADER__',\n    value: function __handleClickCell__REACT_HOT_LOADER__() {\n      return this.__handleClickCell__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleSelectRowColumChange__REACT_HOT_LOADER__',\n    value: function __handleSelectRowColumChange__REACT_HOT_LOADER__() {\n      return this.__handleSelectRowColumChange__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleSelectRow__REACT_HOT_LOADER__',\n    value: function __handleSelectRow__REACT_HOT_LOADER__() {\n      return this.__handleSelectRow__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleRowDoubleClick__REACT_HOT_LOADER__',\n    value: function __handleRowDoubleClick__REACT_HOT_LOADER__() {\n      return this.__handleRowDoubleClick__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleRowClick__REACT_HOT_LOADER__',\n    value: function __handleRowClick__REACT_HOT_LOADER__() {\n      return this.__handleRowClick__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleRowMouseOver__REACT_HOT_LOADER__',\n    value: function __handleRowMouseOver__REACT_HOT_LOADER__() {\n      return this.__handleRowMouseOver__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleRowMouseOut__REACT_HOT_LOADER__',\n    value: function __handleRowMouseOut__REACT_HOT_LOADER__() {\n      return this.__handleRowMouseOut__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: '__handleCellKeyDown__REACT_HOT_LOADER__',\n    value: function __handleCellKeyDown__REACT_HOT_LOADER__() {\n      return this.__handleCellKeyDown__REACT_HOT_LOADER__.apply(this, arguments);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          cellEdit = _props.cellEdit,\n          beforeShowError = _props.beforeShowError,\n          x = _props.x,\n          y = _props.y,\n          keyBoardNav = _props.keyBoardNav,\n          trStyle = _props.trStyle,\n          version = _props.version;\n      var customTableClasses = {\n        'table-striped': this.props.striped,\n        'table-bordered': this.props.bordered,\n        'table-hover': this.props.hover\n      };\n\n      if (this.props.condensed) {\n        if (_util2.default.isBootstrap4(version)) customTableClasses['table-sm'] = true;else customTableClasses['table-condensed'] = true;\n      }\n\n      var tableClasses = (0, _classnames2.default)('table', customTableClasses, this.props.tableBodyClass);\n      var noneditableRows = cellEdit.nonEditableRows && cellEdit.nonEditableRows() || [];\n      var unselectable = this.props.selectRow.unselectable || [];\n\n      var isSelectRowDefined = _util2.default.isSelectRowDefined(this.props.selectRow.mode);\n\n      var tableHeader = _util2.default.renderColGroup(this.props.columns, this.props.selectRow, this.props.expandColumnOptions, version);\n\n      var inputType = this.props.selectRow.mode === _Const2.default.ROW_SELECT_SINGLE ? 'radio' : 'checkbox';\n      var CustomComponent = this.props.selectRow.customComponent;\n      var enableKeyBoardNav = keyBoardNav === true || (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object';\n      var customEditAndNavStyle = (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object' ? keyBoardNav.customStyleOnEditCell : null;\n      var customNavStyle = (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object' ? keyBoardNav.customStyle : null;\n      var ExpandColumnCustomComponent = this.props.expandColumnOptions.expandColumnComponent;\n      var expandColSpan = this.props.columns.filter(function (col) {\n        return col && !col.hidden;\n      }).length;\n\n      if (isSelectRowDefined && !this.props.selectRow.hideSelectColumn) {\n        expandColSpan += 1;\n      }\n\n      var tabIndex = 1;\n\n      if (this.props.expandColumnOptions.expandColumnVisible) {\n        expandColSpan += 1;\n      }\n\n      var tableRows = this.props.data.map(function (data, r) {\n        var tableColumns = this.props.columns.filter(function (_) {\n          return _ != null;\n        }).map(function (column, i) {\n          var fieldValue = data[column.name];\n          var isFocusCell = r === y && i === x;\n\n          if (column.name !== this.props.keyField && // Key field can't be edit\n          column.editable && // column is editable? default is true, user can set it false\n          column.editable.readOnly !== true && this.state.currEditCell !== null && this.state.currEditCell.rid === r && this.state.currEditCell.cid === i && noneditableRows.indexOf(data[this.props.keyField]) === -1) {\n            var editable = column.editable;\n            var format = column.format ? function (value) {\n              return column.format(value, data, column.formatExtraData, r).replace(/<.*?>/g, '');\n            } : false;\n\n            if (_util2.default.isFunction(column.editable)) {\n              editable = column.editable(fieldValue, data, r, i);\n            }\n\n            return _react2.default.createElement(_TableEditColumn2.default, {\n              completeEdit: this.handleCompleteEditCell // add by bluespring for column editor customize\n              ,\n              editable: editable,\n              attrs: column.editAttrs,\n              customEditor: column.customEditor,\n              format: column.format ? format : false,\n              key: i,\n              blurToSave: cellEdit.blurToSave,\n              blurToEscape: cellEdit.blurToEscape,\n              onTab: this.handleEditCell,\n              rowIndex: r,\n              colIndex: i,\n              row: data,\n              fieldValue: fieldValue,\n              className: column.editClassName,\n              invalidColumnClassName: column.invalidEditColumnClassName,\n              beforeShowError: beforeShowError,\n              isFocus: isFocusCell,\n              customStyleWithNav: customEditAndNavStyle\n            });\n          } else {\n            // add by bluespring for className customize\n            var formattedValue = void 0;\n            var columnChild = fieldValue && fieldValue.toString();\n            var columnTitle = null;\n            var tdClassName = column.className;\n            var tdStyles = column.style;\n\n            if (_util2.default.isFunction(column.className)) {\n              tdClassName = column.className(fieldValue, data, r, i);\n            }\n\n            if (_util2.default.isFunction(column.style)) {\n              tdStyles = column.style(fieldValue, data, r, i);\n            }\n\n            if (typeof column.format !== 'undefined') {\n              formattedValue = column.format(fieldValue, data, column.formatExtraData, r);\n\n              if (!_react2.default.isValidElement(formattedValue)) {\n                columnChild = _react2.default.createElement('div', {\n                  dangerouslySetInnerHTML: {\n                    __html: formattedValue\n                  }\n                });\n              } else {\n                columnChild = formattedValue;\n              }\n            }\n\n            if (_util2.default.isFunction(column.columnTitle)) {\n              columnTitle = column.columnTitle(fieldValue, data, r, i);\n            } else if (typeof column.columnTitle === 'string') {\n              columnTitle = column.columnTitle;\n            } else if (column.columnTitle) {\n              if (formattedValue) columnTitle = formattedValue.toString();else if (fieldValue) columnTitle = fieldValue.toString();\n            }\n\n            return _react2.default.createElement(_TableColumn2.default, {\n              key: i,\n              cIndex: i,\n              rIndex: r,\n              dataAlign: column.align,\n              className: tdClassName,\n              columnTitle: columnTitle,\n              cellEdit: cellEdit,\n              hidden: column.hidden,\n              onEdit: this.handleEditCell,\n              width: column.width,\n              onClick: this.handleClickCell,\n              attrs: column.attrs,\n              style: tdStyles,\n              tabIndex: tabIndex++ + '',\n              isFocus: isFocusCell,\n              keyBoardNav: enableKeyBoardNav,\n              onKeyDown: this.handleCellKeyDown,\n              customNavStyle: customNavStyle,\n              row: data,\n              withoutTabIndex: this.props.withoutTabIndex\n            }, columnChild);\n          }\n        }, this);\n        var key = data[this.props.keyField];\n        var disable = unselectable.indexOf(key) !== -1;\n        var selected = this.props.selectedRowKeys.indexOf(key) !== -1;\n        var selectRowColumn = isSelectRowDefined && !this.props.selectRow.hideSelectColumn ? this.renderSelectRowColumn(selected, inputType, disable, CustomComponent, r, data) : null;\n        var expandedRowColumn = this.renderExpandRowColumn(this.props.expandableRow && this.props.expandableRow(data), this.props.expanding.indexOf(key) > -1, ExpandColumnCustomComponent, r);\n        var haveExpandContent = this.props.expandableRow && this.props.expandableRow(data);\n        var isExpanding = haveExpandContent && this.props.expanding.indexOf(key) > -1;\n        var hideRowOnExpand = this.props.hideRowOnExpand; // add by bluespring for className customize\n\n        var trClassName = this.props.trClassName;\n\n        if (_util2.default.isFunction(this.props.trClassName)) {\n          trClassName = this.props.trClassName(data, r);\n        }\n\n        if (isExpanding && this.props.expandParentClass) {\n          trClassName += _util2.default.isFunction(this.props.expandParentClass) ? ' ' + this.props.expandParentClass(data, r) : ' ' + this.props.expandParentClass;\n        }\n\n        var result = [_react2.default.createElement(_TableRow2.default, {\n          isSelected: selected,\n          key: key,\n          className: trClassName,\n          index: r,\n          row: data,\n          selectRow: isSelectRowDefined ? this.props.selectRow : undefined,\n          enableCellEdit: cellEdit.mode !== _Const2.default.CELL_EDIT_NONE,\n          onRowClick: this.handleRowClick,\n          onRowDoubleClick: this.handleRowDoubleClick,\n          onRowMouseOver: this.handleRowMouseOver,\n          onRowMouseOut: this.handleRowMouseOut,\n          onSelectRow: this.handleSelectRow,\n          onExpandRow: this.handleClickCell,\n          unselectableRow: disable,\n          style: trStyle,\n          hidden: isExpanding && hideRowOnExpand,\n          dbClickToEdit: cellEdit.mode === _Const2.default.CELL_EDIT_DBCLICK\n        }, this.props.expandColumnOptions.expandColumnVisible && this.props.expandColumnOptions.expandColumnBeforeSelectColumn && expandedRowColumn, selectRowColumn, this.props.expandColumnOptions.expandColumnVisible && !this.props.expandColumnOptions.expandColumnBeforeSelectColumn && expandedRowColumn, tableColumns)];\n\n        if (haveExpandContent) {\n          var expandBodyClass = _util2.default.isFunction(this.props.expandBodyClass) ? this.props.expandBodyClass(data, r, isExpanding) : this.props.expandBodyClass;\n          result.push(_react2.default.createElement(_ExpandComponent2.default, {\n            key: key + '-expand',\n            row: data,\n            className: expandBodyClass,\n            bgColor: this.props.expandRowBgColor || this.props.selectRow.bgColor || undefined,\n            hidden: !isExpanding,\n            colSpan: expandColSpan,\n            width: \"100%\"\n          }, this.props.expandComponent(data)));\n        }\n\n        return result;\n      }, this);\n\n      if (tableRows.length === 0 && !this.props.withoutNoDataText) {\n        var colSpan = this.props.columns.filter(function (c) {\n          return !c.hidden;\n        }).length + (isSelectRowDefined && !this.props.selectRow.hideSelectColumn ? 1 : 0) + (this.props.expandColumnOptions.expandColumnVisible ? 1 : 0);\n        tableRows = [_react2.default.createElement(_TableRow2.default, {\n          key: '##table-empty##',\n          style: trStyle\n        }, _react2.default.createElement('td', {\n          'data-toggle': 'collapse',\n          colSpan: colSpan,\n          className: 'react-bs-table-no-data'\n        }, this.props.noDataText || _Const2.default.NO_DATA_TEXT))];\n      }\n\n      return _react2.default.createElement('div', {\n        ref: function ref(node) {\n          return _this2.container = node;\n        },\n        className: (0, _classnames2.default)('react-bs-container-body', this.props.bodyContainerClass),\n        style: this.props.style\n      }, _react2.default.createElement('table', {\n        className: tableClasses\n      }, _react2.default.cloneElement(tableHeader, {\n        ref: function ref(node) {\n          return _this2.header = node;\n        }\n      }), _react2.default.createElement('tbody', {\n        ref: function ref(node) {\n          return _this2.tbody = node;\n        }\n      }, tableRows)));\n    }\n  }, {\n    key: '__handleCellKeyDown__REACT_HOT_LOADER__',\n    value: function __handleCellKeyDown__REACT_HOT_LOADER__(e, lastEditCell) {\n      e.preventDefault();\n      var _props2 = this.props,\n          keyBoardNav = _props2.keyBoardNav,\n          onNavigateCell = _props2.onNavigateCell,\n          cellEdit = _props2.cellEdit,\n          selectedRowKeys = _props2.selectedRowKeys;\n      var offset = void 0;\n\n      if (e.keyCode === 37) {\n        offset = {\n          x: -1,\n          y: 0\n        };\n      } else if (e.keyCode === 38) {\n        offset = {\n          x: 0,\n          y: -1\n        };\n      } else if (e.keyCode === 39 || e.keyCode === 9) {\n        offset = {\n          x: 1,\n          y: 0\n        };\n\n        if (e.keyCode === 9 && lastEditCell) {\n          offset = _extends({}, offset, {\n            lastEditCell: lastEditCell\n          });\n        }\n      } else if (e.keyCode === 40) {\n        offset = {\n          x: 0,\n          y: 1\n        };\n      } else if (e.keyCode === 13) {\n        var rowIndex = e.target.parentElement.rowIndex + 1;\n        var enterToEdit = (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object' ? keyBoardNav.enterToEdit : false;\n        var enterToExpand = (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object' ? keyBoardNav.enterToExpand : false;\n        var enterToSelect = (typeof keyBoardNav === 'undefined' ? 'undefined' : _typeof(keyBoardNav)) === 'object' ? keyBoardNav.enterToSelect : false;\n\n        if (cellEdit && enterToEdit) {\n          this.handleEditCell(rowIndex, e.currentTarget.cellIndex, '', e);\n        }\n\n        if (enterToExpand) {\n          this.handleClickCell(e, this.props.y + 1, this.props.x);\n        }\n\n        if (enterToSelect) {\n          var isSelected = selectedRowKeys.indexOf(this.props.data[rowIndex - 1][this.props.keyField]) !== -1;\n          this.handleSelectRow(rowIndex, !isSelected, e);\n        }\n      }\n\n      if (offset && keyBoardNav) {\n        onNavigateCell(offset);\n      }\n    }\n  }, {\n    key: '__handleRowMouseOut__REACT_HOT_LOADER__',\n    value: function __handleRowMouseOut__REACT_HOT_LOADER__(rowIndex, event) {\n      var targetRow = this.props.data[rowIndex];\n      this.props.onRowMouseOut(targetRow, event);\n    }\n  }, {\n    key: '__handleRowMouseOver__REACT_HOT_LOADER__',\n    value: function __handleRowMouseOver__REACT_HOT_LOADER__(rowIndex, event) {\n      var targetRow = this.props.data[rowIndex];\n      this.props.onRowMouseOver(targetRow, event);\n    }\n  }, {\n    key: '__handleRowClick__REACT_HOT_LOADER__',\n    value: function __handleRowClick__REACT_HOT_LOADER__(rowIndex, cellIndex, event) {\n      var _props3 = this.props,\n          onRowClick = _props3.onRowClick,\n          selectRow = _props3.selectRow;\n      if (_util2.default.isSelectRowDefined(selectRow.mode)) cellIndex--;\n      if (this._isExpandColumnVisible()) cellIndex--;\n      onRowClick(this.props.data[rowIndex - 1], rowIndex - 1, cellIndex, event);\n    }\n  }, {\n    key: '__handleRowDoubleClick__REACT_HOT_LOADER__',\n    value: function __handleRowDoubleClick__REACT_HOT_LOADER__(rowIndex, event) {\n      var onRowDoubleClick = this.props.onRowDoubleClick;\n      var targetRow = this.props.data[rowIndex];\n      onRowDoubleClick(targetRow, event);\n    }\n  }, {\n    key: '__handleSelectRow__REACT_HOT_LOADER__',\n    value: function __handleSelectRow__REACT_HOT_LOADER__(rowIndex, isSelected, e) {\n      var selectedRow = void 0;\n      var _props4 = this.props,\n          data = _props4.data,\n          onSelectRow = _props4.onSelectRow;\n      data.forEach(function (row, i) {\n        if (i === rowIndex - 1) {\n          selectedRow = row;\n          return false;\n        }\n      });\n      onSelectRow(selectedRow, isSelected, e, rowIndex - 1);\n    }\n  }, {\n    key: '__handleSelectRowColumChange__REACT_HOT_LOADER__',\n    value: function __handleSelectRowColumChange__REACT_HOT_LOADER__(e, rowIndex) {\n      if (!this.props.selectRow.clickToSelect || !this.props.selectRow.clickToSelectAndEditCell) {\n        this.handleSelectRow(rowIndex + 1, e.currentTarget.checked, e);\n      }\n    }\n  }, {\n    key: '__handleClickCell__REACT_HOT_LOADER__',\n    value: function __handleClickCell__REACT_HOT_LOADER__(event, rowIndex) {\n      var columnIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      var _props5 = this.props,\n          columns = _props5.columns,\n          keyField = _props5.keyField,\n          expandBy = _props5.expandBy,\n          expandableRow = _props5.expandableRow,\n          _props5$selectRow = _props5.selectRow,\n          mode = _props5$selectRow.mode,\n          clickToExpand = _props5$selectRow.clickToExpand,\n          hideSelectColumn = _props5$selectRow.hideSelectColumn,\n          onlyOneExpanding = _props5.onlyOneExpanding;\n\n      var isSelectRowDefined = _util2.default.isSelectRowDefined(mode);\n\n      var selectRowAndExpand = isSelectRowDefined && !clickToExpand ? false : true;\n      columnIndex = isSelectRowDefined && !hideSelectColumn ? columnIndex - 1 : columnIndex;\n      columnIndex = this._isExpandColumnVisible() ? columnIndex - 1 : columnIndex;\n\n      if (expandableRow && selectRowAndExpand && (expandBy === _Const2.default.EXPAND_BY_ROW ||\n      /* Below will allow expanding trigger by clicking on selection column\n      if configure as expanding by column */\n      expandBy === _Const2.default.EXPAND_BY_COL && columnIndex < 0 || expandBy === _Const2.default.EXPAND_BY_COL && columns[columnIndex].expandable)) {\n        var expanding = this.props.expanding;\n        var rowKey = this.props.data[rowIndex - 1][keyField];\n        var isRowExpanding = expanding.indexOf(rowKey) > -1;\n\n        if (isRowExpanding) {\n          // collapse\n          expanding = expanding.filter(function (k) {\n            return k !== rowKey;\n          });\n        } else {\n          // expand\n          if (onlyOneExpanding) expanding = [rowKey];else expanding.push(rowKey);\n        }\n\n        this.props.onExpand(expanding, rowKey, isRowExpanding, event);\n      }\n    }\n  }, {\n    key: '__handleEditCell__REACT_HOT_LOADER__',\n    value: function __handleEditCell__REACT_HOT_LOADER__(rowIndex, columnIndex, action, e) {\n      var selectRow = this.props.selectRow;\n\n      var defineSelectRow = _util2.default.isSelectRowDefined(selectRow.mode);\n\n      var expandColumnVisible = this._isExpandColumnVisible();\n\n      if (defineSelectRow) {\n        columnIndex--;\n        if (selectRow.hideSelectColumn) columnIndex++;\n      }\n\n      if (expandColumnVisible) {\n        columnIndex--;\n      }\n\n      rowIndex--;\n\n      if (action === 'tab') {\n        if (defineSelectRow && !selectRow.hideSelectColumn) columnIndex++;\n        if (expandColumnVisible) columnIndex++;\n        this.handleCompleteEditCell(e.target.value, rowIndex, columnIndex - 1);\n\n        if (columnIndex >= this.props.columns.length) {\n          this.handleCellKeyDown(e, true);\n        } else {\n          this.handleCellKeyDown(e);\n        }\n\n        var _nextEditableCell = this.nextEditableCell(rowIndex, columnIndex),\n            nextRIndex = _nextEditableCell.nextRIndex,\n            nextCIndex = _nextEditableCell.nextCIndex;\n\n        rowIndex = nextRIndex;\n        columnIndex = nextCIndex;\n      }\n\n      var stateObj = {\n        currEditCell: {\n          rid: rowIndex,\n          cid: columnIndex\n        }\n      };\n\n      if (this.props.selectRow.clickToSelectAndEditCell && this.props.cellEdit.mode !== _Const2.default.CELL_EDIT_DBCLICK) {\n        var selected = this.props.selectedRowKeys.indexOf(this.props.data[rowIndex][this.props.keyField]) !== -1;\n        this.handleSelectRow(rowIndex + 1, !selected, e);\n      }\n\n      this.setState(function () {\n        return stateObj;\n      });\n    }\n  }, {\n    key: '__nextEditableCell__REACT_HOT_LOADER__',\n    value: function __nextEditableCell__REACT_HOT_LOADER__(rIndex, cIndex) {\n      var keyField = this.props.keyField;\n      var nextRIndex = rIndex;\n      var nextCIndex = cIndex;\n      var row = void 0;\n      var column = void 0;\n\n      do {\n        if (nextCIndex >= this.props.columns.length) {\n          nextRIndex++;\n          nextCIndex = 0;\n        }\n\n        row = this.props.data[nextRIndex];\n        column = this.props.columns[nextCIndex];\n        if (!row) break;\n        var editable = column.editable;\n\n        if (_util2.default.isFunction(column.editable)) {\n          editable = column.editable(column, row, nextRIndex, nextCIndex);\n        }\n\n        if (editable && editable.readOnly !== true && !column.hidden && keyField !== column.name) {\n          break;\n        } else {\n          nextCIndex++;\n        }\n      } while (row);\n\n      return {\n        nextRIndex: nextRIndex,\n        nextCIndex: nextCIndex\n      };\n    }\n  }, {\n    key: '__handleCompleteEditCell__REACT_HOT_LOADER__',\n    value: function __handleCompleteEditCell__REACT_HOT_LOADER__(newVal, rowIndex, columnIndex) {\n      if (newVal !== null) {\n        var result = this.props.onEditCell(newVal, rowIndex, columnIndex);\n\n        if (result !== _Const2.default.AWAIT_BEFORE_CELL_EDIT) {\n          this.setState(function () {\n            return {\n              currEditCell: null\n            };\n          });\n        }\n      } else {\n        this.setState(function () {\n          return {\n            currEditCell: null\n          };\n        });\n      }\n    }\n  }, {\n    key: '__cancelEditCell__REACT_HOT_LOADER__',\n    value: function __cancelEditCell__REACT_HOT_LOADER__() {\n      this.setState(function () {\n        return {\n          currEditCell: null\n        };\n      });\n    }\n  }, {\n    key: '__handleClickonSelectColumn__REACT_HOT_LOADER__',\n    value: function __handleClickonSelectColumn__REACT_HOT_LOADER__(e, isSelect, rowIndex, row) {\n      e.stopPropagation();\n\n      if (e.target.tagName === 'TD' && (this.props.selectRow.clickToSelect || this.props.selectRow.clickToSelectAndEditCell)) {\n        var unselectable = this.props.selectRow.unselectable || [];\n\n        if (unselectable.indexOf(row[this.props.keyField]) === -1) {\n          this.handleSelectRow(rowIndex + 1, isSelect, e);\n          this.handleClickCell(e, rowIndex + 1);\n        }\n      }\n    }\n  }, {\n    key: 'renderSelectRowColumn',\n    value: function renderSelectRowColumn(selected, inputType, disabled) {\n      var CustomComponent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      var _this3 = this;\n\n      var rowIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var row = arguments[5];\n      return _react2.default.createElement('td', {\n        onClick: function onClick(e) {\n          _this3.handleClickonSelectColumn(e, !selected, rowIndex, row);\n        },\n        style: {\n          textAlign: 'center'\n        }\n      }, CustomComponent ? _react2.default.createElement(CustomComponent, {\n        type: inputType,\n        checked: selected,\n        disabled: disabled,\n        rowIndex: rowIndex,\n        onChange: function onChange(e) {\n          return _this3.handleSelectRowColumChange(e, rowIndex);\n        }\n      }) : _react2.default.createElement('input', {\n        type: inputType,\n        checked: selected,\n        disabled: disabled,\n        onChange: function onChange(e) {\n          return _this3.handleSelectRowColumChange(e, rowIndex);\n        }\n      }));\n    }\n  }, {\n    key: 'renderExpandRowColumn',\n    value: function renderExpandRowColumn(isExpandableRow, isExpanded, CustomComponent) {\n      var _this4 = this;\n\n      var rowIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var content = null;\n\n      if (CustomComponent) {\n        content = _react2.default.createElement(CustomComponent, {\n          isExpandableRow: isExpandableRow,\n          isExpanded: isExpanded\n        });\n      } else if (isExpandableRow) {\n        content = isExpanded ? _react2.default.createElement('span', {\n          className: 'fa fa-minus glyphicon glyphicon-minus'\n        }) : _react2.default.createElement('span', {\n          className: 'fa fa-plus glyphicon glyphicon-plus'\n        });\n      } else {\n        content = ' ';\n      }\n\n      return _react2.default.createElement('td', {\n        className: 'react-bs-table-expand-cell',\n        onClick: function onClick(e) {\n          return _this4.handleClickCell(e, rowIndex + 1);\n        }\n      }, content);\n    }\n  }, {\n    key: '_isExpandColumnVisible',\n    value: function _isExpandColumnVisible() {\n      return this.props.expandColumnOptions.expandColumnVisible;\n    }\n  }, {\n    key: '__getHeaderColGrouop__REACT_HOT_LOADER__',\n    value: function __getHeaderColGrouop__REACT_HOT_LOADER__() {\n      return this.header.childNodes;\n    }\n  }]);\n\n  return TableBody;\n}(_react.Component);\n\nTableBody.propTypes = {\n  version: _propTypes2.default.string,\n  data: _propTypes2.default.array,\n  columns: _propTypes2.default.array,\n  striped: _propTypes2.default.bool,\n  bordered: _propTypes2.default.bool,\n  hover: _propTypes2.default.bool,\n  condensed: _propTypes2.default.bool,\n  keyField: _propTypes2.default.string,\n  selectedRowKeys: _propTypes2.default.array,\n  onRowClick: _propTypes2.default.func,\n  onRowDoubleClick: _propTypes2.default.func,\n  onSelectRow: _propTypes2.default.func,\n  noDataText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  withoutNoDataText: _propTypes2.default.bool,\n  style: _propTypes2.default.object,\n  tableBodyClass: _propTypes2.default.string,\n  bodyContainerClass: _propTypes2.default.string,\n  expandableRow: _propTypes2.default.func,\n  expandComponent: _propTypes2.default.func,\n  expandRowBgColor: _propTypes2.default.string,\n  expandBy: _propTypes2.default.string,\n  expanding: _propTypes2.default.array,\n  onExpand: _propTypes2.default.func,\n  expandBodyClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n  expandParentClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n  onlyOneExpanding: _propTypes2.default.bool,\n  beforeShowError: _propTypes2.default.func,\n  keyBoardNav: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),\n  x: _propTypes2.default.number,\n  y: _propTypes2.default.number,\n  onNavigateCell: _propTypes2.default.func,\n  withoutTabIndex: _propTypes2.default.bool,\n  hideRowOnExpand: _propTypes2.default.bool\n};\nvar _default = TableBody;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(TableBody, 'TableBody', '/Users/allen/Node/react-bootstrap-table-new/react-bootstrap-table/src/TableBody.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/allen/Node/react-bootstrap-table-new/react-bootstrap-table/src/TableBody.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}